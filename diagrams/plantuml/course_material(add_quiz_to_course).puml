@startuml

actor User
participant Controller
participant Course
participant "User" as UserClass

User -> Controller: add_quiz_to_course(course_id, add_quiz_to_course_data, response, current_user)
activate Controller


Controller -> Controller: search_course_by_id(course_uuid)

alt Course found
    alt Course is not None
        Controller -> Controller: search_teacher_by_course(course)
        Controller -> UserClass: Depends(get_current_user)
        activate UserClass
        UserClass --> Controller: user
        deactivate UserClass
        Controller --> User: "Unauthorized"
        
        Controller -> Course: CourseMaterialQuiz()
        activate Course
        Controller -> Course: add_quiz_to_course_data.name
        Course --> Controller: name
        Controller -> Course: add_quiz_to_course_data.description
        Course --> Controller: description
        Controller -> Course: add_quiz_to_course_data.questions
        Course --> Controller: questions
        deactivate Course
        loop for each question in questions
            Controller -> Course: QuizQuestion(question.question, question.correct)
            activate Course
            Course --> Controller: question
            Controller -> Course: quiz.add_question(question)
            Course --> Controller: Quiz added
            deactivate Course
        end
        Controller -> Course: course.add_quiz(quiz)
        activate Course
        Course --> Controller: Quiz added
        deactivate Course
        Controller --> User: str(quiz.get_id())
        
    else Course not found
        Controller --> User: "Teacher not found"
    end
end

@enduml